Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String

    AMIServers:
        Description: Please enter the AMI of the servers
        Type: String
        Default: ami-0729e439b6769d6ab


Resources:
    S3ReadOnlyEC2:
      Type: AWS::IAM::Role
      Properties:
        RoleName: 
          !Sub ${EnvironmentName}-Role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
              Action:
              - sts:AssumeRole
        Path: "/"

    RolePolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: AmazonS3ReadOnlyAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
            - s3:Put*
            - s3:Get*
            - s3:List* 
            Resource:
            - arn:aws:s3:::dinibuck
        Roles:
        - Ref: S3ReadOnlyEC2

    ProfileWithRolesForOurApp:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
        - Ref: S3ReadOnlyEC2

    # BastionHost:
    #   Type: AWS::EC2::Instance
    #   Properties:
    #     ImageId: !Ref AMIServers
    #     KeyName: "bastion"
    #     InstanceType: t2.micro
    #     Tags:
    #       - Key: Name
    #         Value: Bastion Host 
    #     NetworkInterfaces:
    #       - AssociatePublicIpAddress: "true"
    #         DeviceIndex: "0"
    #         GroupSet:
    #           - Ref: WebServerSecGroup
    #         SubnetId:
    #           Fn::ImportValue:
    #             !Sub "${EnvironmentName}-BAST"
        # UserData:
        #   Fn::Base64: |
        #     #!/bin/bash
        #     sudo apt-get update -y
        #     sudo apt-get install apache2 -y
        #     sudo systemctl start apache2.service 


    LoadBalancerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http traffic to and from load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 172.20.10.4/32
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

    WebAppLaunchConfig: 
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install apache2 -y
            sudo systemctl start apache2.service
            cd /var/www/html
            echo "Yay! I made it here" > index.html
        ImageId: !Ref AMIServers
        KeyName: dini-kosu
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        SecurityGroups:
        -   Ref: WebServerSecGroup
        InstanceType: t3.small
        BlockDeviceMappings:
        -   DeviceName: "/dev/sdk"
            Ebs:
                VolumeSize: '10'  


    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:  
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: '4'
        MaxSize: '5'
        TargetGroupARNs:
        - Ref: WebAppTargetGroup

    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        SecurityGroups:
        - Ref: LoadBalancerSecGroup
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: 80
          Protocol: HTTP

    ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 8080
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: 
        - Fn::ImportValue: 
            Fn::Sub: "${EnvironmentName}-VPCID"